/**
 * Technical documentation regarding the user story macros01.01: Base Operators.
 * <br/>
 * <br/>
 *
 * <h2>1. Requirement</h2>
 * Support cleansheets formulas. The user should be able to use Base Operators.
 * The system identifies a base operator because it can be either a range of
 * cells or also a function operator. We must implement the addition and
 * subtraction operators having as operands ranges of cells and the result will
 * be a matrix. We must also implement the use of functions that receive as
 * operands matrices.
 *
 * <br/>
 * <br/>
 * <b>Use Case "Base Operators":</b> The user writes the base operators inside (
 * and ) with a operator in between the operands. When enter is pressed the
 * result of the operation is saved in the cell,with the form of a matrix.<br/>
 * <br/>
 *
 * <h2>2. Analysis</h2>
 * To have full support to the base operators we will need to study even further
 * how the ANTLR works as well as the lexer and parser. The nature of the base
 * operators must be well defined so that it may be possible to have a outcome
 * like a matrix.
 * <br/>
 * <br/>
 * <h3>First "analysis" sequence diagram</h3>
 * The following diagram depicts a proposal for the realization of the
 * previously described use case. We call this diagram an "analysis" use case
 * realization because it functions like a draft that we can do during analysis
 * or early design in order to get a previous approach to the design. For that
 * reason we mark the elements of the diagram with the stereotype "analysis"
 * that states that the element is not a design element and, therefore, does not
 * exists as such in the code of the application (at least at the moment that
 * this diagram was created).<br/>
 * <br/>
 * <img src="doc-files/draft_macros_01_01.png"/>
 * <br/>
 * <br/>
 * Therefore, at this point, we need to study how to include all this analysis
 * in the formula file and to the parser/lexer. This is the core technical
 * problem regarding this issue.<br/>
 * <h3>Analysis of Core Technical Problem</h3>
 * We can see a class diagram of the domain model of the application
 * <a href="../../../../overview-summary.html#modelo_de_dominio">here</a><br/>
 * From the domain model we see that there is a Cell interface. This defines the
 * interface of the cells. We also see that there is a class CellImpl that must
 * implement the Cell interface.<br/>
 * If we open the {@link csheets.core.Cell} code we see that the interface is
 * defined as:
 * <br/>
 * <code>public interface Cell extends Comparable &lt;Cell&gt;, Extensible&lt;Cell&gt;, Serializable</code>.
 * <br/>
 * Because of the <code>Extensible</code> it seams that a cell can be
 * extended.<br/>
 * If we further investigate we can see the Cell has support for Formulas.
 * *<br/>
 * <code> public void setContent(String content) throws FormulaCompilationException;</code>
 * <br/>
 * The class FormulaCompiler will attempt to create a formula from a string. The
 * setContent method will validate the formula throwing an exception if it
 * detects an error. The formula class implements the expression interface which
 * is responsible for parsing the expression and as such validating it. The
 * Expressions in the present moment are represented as abstract syntax trees
 * and can hold literals, references, operations (unary and binary and function
 * calls.
 * <br/>
 * <br/>
 * <code>public Object accept(ExpressionVisitor visitor);</code>
 * <br/>
 * <br/>
 *
 * The File Formula has the data used to parse the expressions and validate
 * them. To add the support for the base operators and operators we need to edit
 * with AntlWorks this file and add their behavior.
 *
 * <h2>3. Tests</h2>
 * Basically, from requirements and also analysis, we see that the core
 * functionality of this use case is to enable the use of base operators. We
 * need to be able in case of having multiple numbers to add up or subtract,
 * applying them sequentially and store the proper result in matrices. Following
 * this approach we can start by coding a unit test that tests the creation of
 * an base operator inside a cell. Another test must be made to validate the
 * result of the base operator. As usual, in a test driven development approach
 * tests normally fail in the beginning. The idea is that the tests will pass in
 * the end.
 * <br/>
 * <br/>
 * see: <code>csheets.userstories.macros01_01.blocks</code><br/>
 *
 * <h2>4. Design</h2>
 *
 * This User Story uses mostly intefaces and has the particularity of having 2
 * classes that are automatically generated by the respective intefaces, those
 * classes are FormulaLexer and FormulaParser and there are specific Java
 * classes (Lexer and Parser) that generated depending on the grammar
 * created.<br/>
 * For the development of the base operator we dont have to define it in the
 * grammar because we did it in the previous use case so now we just have to
 * implement the behavior of said rule in the respective class.<br/>
 * The class ExpressionCompiler during runtime will identify and decide what
 * type of command is written and choose the correct behavior.<br/>
 * The following diagram illustrate the approach used in the design of the
 * solution for this use case.<br/>
 * <img src="doc-files/design_macros_01_01.png"/>
 * </br>
 *
 * <h2>5. Coding</h2>
 * see:<br/>
 * <a href="../../../../csheets/core/formula/lang/package-summary.html">csheets.core.formula.lang</a><br/>
 * <br/>
 * <h2>6. Final Remarks</h2>
 * As an extra this use case to apply the new functions and operators needs them
 * to be written in the language.props file (n the src-resources package)<br/>
 * <br/>
 * <br/>
 *
 * @author i130386
 */
package csheets.userstories.macros03_01.baseOperators.i130386;

/**
 * This class is only here so that javadoc includes the documentation about this
 * EMPTY package! Do not remove this class!
 *
 *
 * @author alexandrebraganca
 */
class _baseOperators_ {
}
