/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csheets.ext.selectgame.ui;

import csheets.ext.selectgame.Player;
import csheets.ext.selectgame.SelectGameController;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Sergio
 */
public class ChoosePartner extends javax.swing.JDialog {

	private Player player;
	private static ChoosePartner instance;
	private String activeGame;
	private boolean startStopSearchingToggleButtonStatus = false;
	private final ArrayList<String> listOfAvailableCleanSheetsInstances = new ArrayList<String>();
	private final ArrayList<Boolean> connectDisconnectToggleButtonClick = new ArrayList<Boolean>();
	private SelectGameController controller;

	private ChoosePartner(java.awt.Frame parent,
						  boolean modal,
						  SelectGameController controller) {
		super(parent, modal);
		this.controller = controller;
		initComponents();
		player = new Player();
		gamesComboBox.removeAllItems();
		iconsComboBox.removeAllItems();
		gamesComboBox.addItem("Naval Battle");
		gamesComboBox.addItem("Checkers");

		String[] iconStrings = {"Sword", "Clover", "Spade", "Ball", "Horse", "Bishop", "Command"};

		Object[] icons
			= {
				new ImageIcon("icons/icon1.png", iconStrings[0]),
				new ImageIcon("icons/icon2.png", iconStrings[1]),
				new ImageIcon("icons/icon3.png", iconStrings[2]),
				new ImageIcon("icons/icon4.png", iconStrings[3]),
				new ImageIcon("icons/icon5.png", iconStrings[4]),
				new ImageIcon("icons/icon6.png", iconStrings[5]),
				new ImageIcon("icons/icon7.png", iconStrings[6])
			};
		for (int i = 0; i < icons.length; i++) {
			iconsComboBox.addItem(icons[i]);
		}
	}

	/**
	 * Creates new form ChoosePartnerToConnect
	 */
	public ChoosePartner() {
	}

	public static synchronized ChoosePartner getInstance(
		java.awt.Frame parent, boolean modal, SelectGameController controller) {
		if (instance == null) {
			instance = new ChoosePartner(parent, modal, controller);
		}
		return instance;
	}

	/**
	 * This method retrieves a list of all the available CleanSheets instances
	 * on the same LAN.
	 */
	private void retrieveAvailableCleanSheetsInstances() {
		listOfAvailableCleanSheetsInstances.clear();
		Map<InetAddress, Integer> activeInstances = controller.searchInstances();
		for (Map.Entry<InetAddress, Integer> activeInstance : activeInstances.
			entrySet()) {
			listOfAvailableCleanSheetsInstances.add(activeInstance.getKey().
				getHostName());
		}

		availableCleanSheetsInstancesList.
			setListData(listOfAvailableCleanSheetsInstances.toArray());

		int i;
		for (i = 0; i < listOfAvailableCleanSheetsInstances.size(); i++) {
			connectDisconnectToggleButtonClick.add(true);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        connectionPortSpinner = new javax.swing.JSpinner();
        searchPartnerButton = new javax.swing.JToggleButton();
        availableCleanSheetsInstancesOnLANLabel = new javax.swing.JLabel();
        nickNameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        iconsComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        gamesComboBox = new javax.swing.JComboBox();
        startGameButton = new javax.swing.JButton();
        connectDisconnectToggleButton = new javax.swing.JToggleButton();
        refreshListButton = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        availableCleanSheetsInstancesList = new javax.swing.JList();
        jSeparator1 = new javax.swing.JSeparator();

        jLabel1.setText("Select new connection port (max. 65535):");

        connectionPortSpinner.setModel(new javax.swing.SpinnerNumberModel(1026, 1026, 65535, 1));

        searchPartnerButton.setText("Search Partner");
        searchPartnerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPartnerButtonActionPerformed(evt);
            }
        });

        availableCleanSheetsInstancesOnLANLabel.setText("Available CleanSheets instances on LAN:");

        jLabel2.setText("NickName:");

        jLabel3.setText("Image:");

        iconsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        iconsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iconsComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setText("Select Game:");

        gamesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gamesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gamesComboBoxActionPerformed(evt);
            }
        });

        startGameButton.setText("Start Game");
        startGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startGameButtonActionPerformed(evt);
            }
        });

        connectDisconnectToggleButton.setText("Connect");
        connectDisconnectToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectDisconnectToggleButtonActionPerformed(evt);
            }
        });

        refreshListButton.setText("Refresh List");
        refreshListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshListButtonActionPerformed(evt);
            }
        });

        availableCleanSheetsInstancesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        availableCleanSheetsInstancesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                availableCleanSheetsInstancesListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(availableCleanSheetsInstancesList);

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(availableCleanSheetsInstancesOnLANLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel1)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(connectionPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(searchPartnerButton)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(refreshListButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(connectDisconnectToggleButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel2))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(nickNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(iconsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(gamesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(startGameButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectionPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchPartnerButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(availableCleanSheetsInstancesOnLANLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectDisconnectToggleButton)
                    .addComponent(refreshListButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nickNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(iconsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(gamesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(startGameButton)
                .addGap(14, 14, 14))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchPartnerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPartnerButtonActionPerformed
		// TODO add your handling code here:
		if (startStopSearchingToggleButtonStatus) {
			startStopSearchingToggleButtonStatus = false;
			refreshListButton.setEnabled(false);
			connectDisconnectToggleButton.setEnabled(false);
			availableCleanSheetsInstancesList.setEnabled(false);
			/*availableCleanSheetsInstancesScrollPane.getVerticalScrollBar().
			 setEnabled(false);
			 availableCleanSheetsInstancesScrollPane.getVerticalScrollBar().
			 setEnabled(false);
			 availableCleanSheetsInstancesScrollPane.getViewport().
			 setEnabled(false);*/
			searchPartnerButton.setText("Start Searching");
			controller.setVisibility(false);
			listOfAvailableCleanSheetsInstances.clear();
		} else {
			int port = (Integer) connectionPortSpinner.getValue();
			JOptionPane.showMessageDialog(
				rootPane,
				"You are now connected with the port " + port + "!",
				"Success",
				JOptionPane.INFORMATION_MESSAGE
			);
			startStopSearchingToggleButtonStatus = true;
			refreshListButton.setEnabled(true);
			connectDisconnectToggleButton.setEnabled(true);
			availableCleanSheetsInstancesList.setEnabled(true);
			/*availableCleanSheetsInstancesScrollPane.getHorizontalScrollBar().
			 setEnabled(true);
			 availableCleanSheetsInstancesScrollPane.getVerticalScrollBar().
			 setEnabled(true);
			 availableCleanSheetsInstancesScrollPane.getVerticalScrollBar().
			 setEnabled(true);
			 availableCleanSheetsInstancesScrollPane.getViewport().
			 setEnabled(true);*/
			searchPartnerButton.setText("Stop Searching");
			controller.changePort(port);
			controller.setVisibility(true);
			retrieveAvailableCleanSheetsInstances();
			//controller.startServer(sendCellAction);
		}
    }//GEN-LAST:event_searchPartnerButtonActionPerformed

    private void iconsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iconsComboBoxActionPerformed
		// TODO add your handling code here:
    }//GEN-LAST:event_iconsComboBoxActionPerformed

    private void gamesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gamesComboBoxActionPerformed
		// TODO add your handling code here:
    }//GEN-LAST:event_gamesComboBoxActionPerformed

    private void refreshListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshListButtonActionPerformed
		// TODO add your handling code here:
		retrieveAvailableCleanSheetsInstances();
    }//GEN-LAST:event_refreshListButtonActionPerformed

    private void availableCleanSheetsInstancesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_availableCleanSheetsInstancesListMouseClicked
		// TODO add your handling code here:
		try {
			availableCleanSheetsInstancesList.updateUI();
			int index = availableCleanSheetsInstancesList.getSelectedIndex();
			if ("Disconnect".equals(connectDisconnectToggleButton.getText()) && connectDisconnectToggleButtonClick.
				get(index)) {
				connectDisconnectToggleButton.setSelected(false);
				connectDisconnectToggleButton.setText("Connect");
			} else if ("Connect".equals(connectDisconnectToggleButton.getText()) && !connectDisconnectToggleButtonClick.
				get(index)) {
				connectDisconnectToggleButton.setSelected(true);
				connectDisconnectToggleButton.setText("Disconnect");
			}
		} catch (ArrayIndexOutOfBoundsException ex) {
			//Just to not give error before click button start sharing
		}
    }//GEN-LAST:event_availableCleanSheetsInstancesListMouseClicked

    private void startGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startGameButtonActionPerformed
		// TODO add your handling code here:
		if (nickNameTextField.getText().equals("")) {
			JOptionPane.
				showMessageDialog(null, "Digit your nickname!!!", "Error", JOptionPane.ERROR_MESSAGE);
		} else {
			activeGame = gamesComboBox.getSelectedItem().toString();
			player.setName(nickNameTextField.getText());
			player.setPlayerIcon((ImageIcon) iconsComboBox.getSelectedItem());
			controller.setActiveGame(activeGame);
			dispose();
			GameScene dialog = new GameScene(null, true, controller, player, activeGame);
			dialog.setVisible(true);
		}

    }//GEN-LAST:event_startGameButtonActionPerformed

    private void connectDisconnectToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectDisconnectToggleButtonActionPerformed
		// TODO add your handling code here:
		if (availableCleanSheetsInstancesList.getSelectedValue() == null) {
			connectDisconnectToggleButton.setSelected(false);
			JOptionPane.showMessageDialog(
				rootPane,
				"You have to select one or more instances of CleanSheets from the list!",
				"Error",
				JOptionPane.ERROR_MESSAGE
			);
		} else {
			int index = availableCleanSheetsInstancesList.getSelectedIndex();
			if (connectDisconnectToggleButtonClick.get(index)) {
				controller.
					establishConnection((List<String>) availableCleanSheetsInstancesList.
						getSelectedValuesList(), null);
				connectDisconnectToggleButtonClick.set(index, false);
				connectDisconnectToggleButton.setText("Disconnect");
			} else {
				controller.interruptConnection();
				connectDisconnectToggleButtonClick.set(index, true);
				connectDisconnectToggleButton.setText("Connect");
			}
		}
    }//GEN-LAST:event_connectDisconnectToggleButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList availableCleanSheetsInstancesList;
    private javax.swing.JLabel availableCleanSheetsInstancesOnLANLabel;
    private javax.swing.JToggleButton connectDisconnectToggleButton;
    private javax.swing.JSpinner connectionPortSpinner;
    private javax.swing.JComboBox gamesComboBox;
    private javax.swing.JComboBox iconsComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField nickNameTextField;
    private javax.swing.JToggleButton refreshListButton;
    private javax.swing.JToggleButton searchPartnerButton;
    private javax.swing.JButton startGameButton;
    // End of variables declaration//GEN-END:variables
}
